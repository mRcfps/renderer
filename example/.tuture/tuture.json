{"name":"Getting Started with Webpack","version":"0.0.1","language":"en","topics":["webpack","frontend engineering"],"maintainer":"dev@tuture.io","steps":[{"name":"Basic Setup","commit":"90ef523","explain":"First let's create a directory, initialize npm, install webpack locally, and install the webpack-cli (the tool used to run webpack on the command line). Now we'll create the following directory structure, files and their contents.\n","diff":[{"file":"index.html"},{"file":"src/index.js"},{"file":"package.json","explain":"We also need to adjust our package.json file in order to make sure we mark our package as private, as well as removing the main entry. This is to prevent an accidental publish of your code.\n"}]},{"name":"Creating a Bundle","commit":"cfadaa6","explain":"First we'll tweak our directory structure slightly, separating the \"source\" code (`/src`) from our \"distribution\" code (`/dist`). The \"source\" code is the code that we'll write and edit. The \"distribution\" code is the minimized and optimized `output` of our build process that will eventually be loaded in the browser.\n","diff":[{"file":"package.json","explain":"To bundle the `lodash` dependency with index.js, we'll need to install the library locally.\n"},{"file":"src/index.js","explain":"Import `lodash` in our script."},{"file":"dist/index.html","explain":"Since we'll be bundling our scripts, we have to update our index.html file. Let's remove the lodash `<script>`, as we now import it, and modify the other `<script>` tag to load the bundle, instead of the raw `/src` file\n"}]},{"name":"Using a Configuration","commit":"e0826b9","explain":"As of version 4, webpack doesn't require any configuration, but most projects will need a more complex setup, which is why webpack supports a configuration file. This is much more efficient than having to manually type in a lot of commands in the terminal, so let's create one to replace the CLI line options used above.\n","diff":[{"file":"webpack.config.js"}]}]}